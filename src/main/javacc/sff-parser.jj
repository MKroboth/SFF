/*-
 * #%L
 * Cactis SFF
 * %%
 * Copyright (C) 2019 Maximilian Kroboth
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */
PARSER_BEGIN(SFFParser)
package eu.cactis.sff.parser;
/*-
 * #%L
 * Cactis SFF
 * %%
 * Copyright (C) 2019 Maximilian Kroboth
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */
import eu.cactis.sff.*;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Map;
import java.util.Hashtable;
import java.util.Arrays;
import java.util.Collections;

public class SFFParser {
    private String resolveEscapeSequence(String escapeSequence) {
        StringBuilder sb = new StringBuilder(escapeSequence.length());


        for(int i = 0; i < escapeSequence.length(); ++i) {
            if(escapeSequence.charAt(i) == '\\') {
                ++i;
                        switch (escapeSequence.charAt(i)) {
                            case 'n': sb.append('\n'); break;
                            case 'r': sb.append('\r'); break;
                            default:
                               sb.append(escapeSequence.charAt(i));
                        }

            } else {
                sb.append(escapeSequence.charAt(i));
            }
        }

        return sb.toString();
   }

}
PARSER_END(SFFParser)


SKIP : { "\r" | "\n" | "\t" | " " }
TOKEN : { <#ALPHA : [
   "\u0041"-"\u005a", // Latin Alphabet(upper case)
   "\u005f",  // Underscore
   "\u0061"-"\u007a", // Latin Alphabet(lower case)
   "\u00c0"-"\u00d6", // Letters: Uppercase
   "\u00d8"-"\u00f6", // Letters: Lowercase
   "\u00f8"-"\u00ff", // Letters: Lowercase
   "\u0100"-"\u1fff", // Stuff
   "\u3040"-"\u318f",
   "\u3300"-"\u337f",
   "\u3400"-"\u3d2d",
   "\u4e00"-"\u9fff",
   "\uf900"-"\ufaff"]> }
TOKEN : { <#NUMERIC : ["0"-"9"]> }
TOKEN : { <#ALPHANUM : (<ALPHA>)|(<NUMERIC>) >}
<DEFAULT> TOKEN : { <IDENTIFIER : (<ALPHA> | "-" | <ESCAPE_SEQUENCE>) (<ALPHANUM> | "-" | <ESCAPE_SEQUENCE> )* > }
TOKEN : { <BEGIN_GROUP : "{" > }
TOKEN : { <END_GROUP : "}" > }

TOKEN : { <BEGIN_COMMENT : "#"> : COMMENT_STATE }
<ASSIGNMENT_STATE> TOKEN : { <AS_ESCAPED_STRING : <ESCAPE_SEQUENCE> > }
<ASSIGNMENT_STATE> TOKEN : { <TEXT_CONTENT : (~["\r", "\n", "\\"])+ > }
<ASSIGNMENT_STATE> TOKEN : { <END_ASSIGNMENT : ["\r", "\n"]> : DEFAULT }
<COMMENT_STATE> TOKEN : { <COMMENT_CONTENT : (~["\r", "\n"])+ > }
<COMMENT_STATE> TOKEN : { <END_COMMENT : ["\r", "\n"]> : DEFAULT }

TOKEN : { <BEGIN_PI : "@">: PI_STATE }
<PI_STATE> TOKEN : { <PI_ID_CONTENT : (~["\r", "\n", "\t", " "])+ [" ", "\t"]>: PI_STATE_CNT }
<PI_STATE_CNT> TOKEN : { <PI_CONTENT : (~["\r", "\n", "\t", " "])+(~["\r", "\n"])* > }
<PI_STATE_CNT> TOKEN : { <END_PI : ["\r", "\n"]> : DEFAULT }

TOKEN : { <#ESCAPE_SEQUENCE: "\\" ["<", ">", ",", "\"", "(", ")", "{", "}", "[", "]", ":", "\\", "n", "r", "v", "=", "#", "@", " "] >}


TOKEN : { <BEGIN_PLIST : "(" > : PLIST_STATE }
<PLIST_STATE> TOKEN :  { <END_PLIST : ")">: DEFAULT }
<PLIST_STATE> TOKEN : { <PLIST_SEP : (" ")+> }
<PLIST_STATE> TOKEN : { <PLIST_CONTENT : (~[")", " ", "\\"])+> }
<PLIST_STATE> TOKEN : { <PL_ESCAPED_STRING : <ESCAPE_SEQUENCE> > }

TOKEN : { <BEGIN_TEXT : "<" > : TEXT_STATE }
<TEXT_STATE> TOKEN : { <TS_ESCAPED_STRING : <ESCAPE_SEQUENCE>> }
<TEXT_STATE> TOKEN : { <END_TEXT : ">" > : DEFAULT }
<TEXT_STATE> TOKEN : { <TEXTBLOCK_CONTENT : (~["<",">"," ","\\"])(~["<",">","\\"])* > }
TOKEN : { <BEGIN_AMAP : "[" > : AMAP_STATE }
<AMAP_STATE> TOKEN : { <COLON : ":" > }
<AMAP_STATE> TOKEN : { <COMMA : "," > }
<AMAP_STATE> TOKEN : { <END_AMAP : "]" >: DEFAULT }
<AMAP_STATE> TOKEN : { <AM_ESCAPED_STRING : <ESCAPE_SEQUENCE>> }
<AMAP_STATE> TOKEN : { <AMAP_ENTITY : (~["]",",",":","\\"])+ > }

TOKEN : { <BEGIN_ASSIGNMENT : "=" (" ")* > : ASSIGNMENT_STATE }


List<Node> Start():
{ List<Node> nodes = new LinkedList<>(); Node nd; }{
 ( ( nd = PNode()) { nodes.add(nd); })+
 { return nodes; }
}

private Node PNode():
{ Node ret; }
{
  (( ret = PDataNode() ) | (ret = PMetaDataNode()))

  { return ret; }
}
private GroupNode PGroupNode(String name, List<String> properties, Map<String, String> attributes):
{ Token t;
Node nd;
List<Node> children = new LinkedList<>(); }
{
    <BEGIN_GROUP>
    (nd = PNode() {children.add(nd);})*
    <END_GROUP>

    { return new GroupNode(name, properties, attributes, children); }
}

private Node PCommentNode():
{ Token t; String content = ""; }
{
    <BEGIN_COMMENT>
    (t = <COMMENT_CONTENT> { content = t.image.trim(); })?
    <END_COMMENT>

    { return new CommentNode(content); }
}

private Node PProcessingInstructionNode():
{ Token t; String name; String content = ""; }
{
    <BEGIN_PI>
    t = <PI_ID_CONTENT> { name = t.image.trim(); }
    (t = <PI_CONTENT> { content = t.image.trim(); })?
    <END_PI>

    { return new ProcessingInstructionNode(name, content); }
}

private Node PMetaDataNode(): {Node nd;} {
   ((nd = PCommentNode()) | (nd = PProcessingInstructionNode()) | (nd = PTextNode()))

   { return nd; }
}

Node PTextNode(): { Token t; StringBuilder sb = new StringBuilder(); } {
    <BEGIN_TEXT>

    ((t = <TEXTBLOCK_CONTENT> { sb.append(t.image); })|(t = <TS_ESCAPED_STRING> { sb.append(resolveEscapeSequence(t.image)); }))*
    <END_TEXT>
    { return new TextNode(sb.toString()); }
}

List<String> PPList():
{Token t; StringBuilder sb = new StringBuilder(); LinkedList<String> lst = new LinkedList<>(); }{
    <BEGIN_PLIST>
    ((t  = <PLIST_CONTENT> {sb.append(t.image);})|(t = <PL_ESCAPED_STRING> {sb.append(resolveEscapeSequence(t.image)); }))+
    {  lst.add(sb.toString()); sb.setLength(0); }
    (<PLIST_SEP>
    ((t  = <PLIST_CONTENT> {sb.append(t.image);})|(t = <PL_ESCAPED_STRING> {sb.append(resolveEscapeSequence(t.image)); }))+
       { lst.add(sb.toString()); sb.setLength(0); })*
    <END_PLIST>

    { lst.removeAll(Arrays.asList("", null));
        return new ArrayList<>(lst); }
}

Map<String, String> PAMap():
{Token elem; StringBuilder k = new StringBuilder(); StringBuilder v = new StringBuilder(); Map<String, String> map = new Hashtable<>(); }
{
    <BEGIN_AMAP>
    ((elem = <AMAP_ENTITY> { k.append(elem.image);})|(elem = <AM_ESCAPED_STRING> {k.append(resolveEscapeSequence(elem.image)); }))+
     <COLON>
    ((elem = <AMAP_ENTITY> { v.append(elem.image);})|(elem = <AM_ESCAPED_STRING> {v.append(resolveEscapeSequence(elem.image)); }))+

      { map.put(k.toString(),v.toString()); k.setLength(0); v.setLength(0); }

    ( <COMMA>
      ((elem = <AMAP_ENTITY> { k.append(elem.image);})|(elem = <AM_ESCAPED_STRING> {k.append(resolveEscapeSequence(elem.image)); }))+
      <COLON>
      ((elem = <AMAP_ENTITY> { v.append(elem.image);})|(elem = <AM_ESCAPED_STRING> {v.append(resolveEscapeSequence(elem.image)); }))+

      { map.put(k.toString(),v.toString()); k.setLength(0); v.setLength(0); })*
    <END_AMAP>

    { return map; }
}
private Node  PDataNode():
{ Token t; Node nd; String name; List<String> properties = new LinkedList<>(); Map<String, String> attributes = new Hashtable<>(); }
{
    t = <IDENTIFIER> { name = resolveEscapeSequence(t.image.trim()); }
    (properties = PPList())?
    (attributes = PAMap())?
    (( nd = PPropertyNode(name, properties, attributes)) | ( nd = PGroupNode(name, properties, attributes)) | (
        nd = PTextNode()
        { nd = new GroupNode(name, properties, attributes, Collections.singletonList(nd)); }
    ))

    { return nd; }
}

PropertyNode PPropertyNode(String name, List<String> properties, Map<String, String> attributes):
{ Token t; StringBuilder sb = new StringBuilder(); }
{
    <BEGIN_ASSIGNMENT>
   ((t = <TEXT_CONTENT> { sb.append(t.image); })|(t = <AS_ESCAPED_STRING> { sb.append(resolveEscapeSequence(t.image)); }))*
    <END_ASSIGNMENT>

    { return new PropertyNode(name, properties, attributes, sb.toString().trim()); }
}
